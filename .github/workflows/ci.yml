name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.24'

jobs:
  # Generate mocks before testing
  generate:
    name: Generate Mocks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
          ~/go/bin
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install mockgen
      run: |
        export PATH=$PATH:~/go/bin
        go install go.uber.org/mock/mockgen@latest

    - name: Generate mocks
      run: |
        export PATH=$PATH:~/go/bin
        go generate ./internal/service/...

    - name: Verify mocks generated
      run: |
        if [ ! -f "internal/mocks/repository_mock.go" ]; then
          echo "Error: repository_mock.go not generated"
          exit 1
        fi
        if [ ! -f "internal/mocks/usecase_mock.go" ]; then
          echo "Error: usecase_mock.go not generated"
          exit 1
        fi
        echo "✅ All mocks generated successfully"

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: generate

    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: order_delivery_db_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
          ~/go/bin
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Install mockgen
      run: |
        export PATH=$PATH:~/go/bin
        go install go.uber.org/mock/mockgen@latest

    - name: Generate mocks
      run: |
        export PATH=$PATH:~/go/bin
        go generate ./internal/service/...

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_NAME: order_delivery_db_test
        DB_SSLMODE: disable

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install mockgen
      run: |
        export PATH=$PATH:~/go/bin
        go install go.uber.org/mock/mockgen@latest

    - name: Generate mocks
      run: |
        export PATH=$PATH:~/go/bin
        go generate ./internal/service/...

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m

  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Build
      run: go build -v -o bin/order-delivery-service ./cmd/server

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: order-delivery-service
        path: bin/order-delivery-service
        retention-days: 7

  docker:
    name: Docker Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: order-delivery-service:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ github.sha }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          GIT_COMMIT=${{ github.sha }}

    - name: Test Docker image
      run: |
        docker images | grep order-delivery-service
        echo "✅ Docker image built successfully"
