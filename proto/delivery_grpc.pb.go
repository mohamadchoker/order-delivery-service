// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: proto/delivery.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DeliveryService_CreateDeliveryAssignment_FullMethodName = "/delivery.DeliveryService/CreateDeliveryAssignment"
	DeliveryService_GetDeliveryAssignment_FullMethodName    = "/delivery.DeliveryService/GetDeliveryAssignment"
	DeliveryService_UpdateDeliveryStatus_FullMethodName     = "/delivery.DeliveryService/UpdateDeliveryStatus"
	DeliveryService_ListDeliveryAssignments_FullMethodName  = "/delivery.DeliveryService/ListDeliveryAssignments"
	DeliveryService_AssignDriver_FullMethodName             = "/delivery.DeliveryService/AssignDriver"
	DeliveryService_GetDeliveryMetrics_FullMethodName       = "/delivery.DeliveryService/GetDeliveryMetrics"
)

// DeliveryServiceClient is the client API for DeliveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DeliveryService manages order delivery assignments
type DeliveryServiceClient interface {
	// CreateDeliveryAssignment creates a new delivery assignment
	CreateDeliveryAssignment(ctx context.Context, in *CreateDeliveryAssignmentRequest, opts ...grpc.CallOption) (*DeliveryAssignment, error)
	// GetDeliveryAssignment retrieves a delivery assignment by ID
	GetDeliveryAssignment(ctx context.Context, in *GetDeliveryAssignmentRequest, opts ...grpc.CallOption) (*DeliveryAssignment, error)
	// UpdateDeliveryStatus updates the status of a delivery
	UpdateDeliveryStatus(ctx context.Context, in *UpdateDeliveryStatusRequest, opts ...grpc.CallOption) (*DeliveryAssignment, error)
	// ListDeliveryAssignments lists delivery assignments with pagination
	ListDeliveryAssignments(ctx context.Context, in *ListDeliveryAssignmentsRequest, opts ...grpc.CallOption) (*ListDeliveryAssignmentsResponse, error)
	// AssignDriver assigns a driver to a delivery
	AssignDriver(ctx context.Context, in *AssignDriverRequest, opts ...grpc.CallOption) (*DeliveryAssignment, error)
	// GetDeliveryMetrics retrieves delivery metrics
	GetDeliveryMetrics(ctx context.Context, in *GetDeliveryMetricsRequest, opts ...grpc.CallOption) (*DeliveryMetrics, error)
}

type deliveryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeliveryServiceClient(cc grpc.ClientConnInterface) DeliveryServiceClient {
	return &deliveryServiceClient{cc}
}

func (c *deliveryServiceClient) CreateDeliveryAssignment(ctx context.Context, in *CreateDeliveryAssignmentRequest, opts ...grpc.CallOption) (*DeliveryAssignment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeliveryAssignment)
	err := c.cc.Invoke(ctx, DeliveryService_CreateDeliveryAssignment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryServiceClient) GetDeliveryAssignment(ctx context.Context, in *GetDeliveryAssignmentRequest, opts ...grpc.CallOption) (*DeliveryAssignment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeliveryAssignment)
	err := c.cc.Invoke(ctx, DeliveryService_GetDeliveryAssignment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryServiceClient) UpdateDeliveryStatus(ctx context.Context, in *UpdateDeliveryStatusRequest, opts ...grpc.CallOption) (*DeliveryAssignment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeliveryAssignment)
	err := c.cc.Invoke(ctx, DeliveryService_UpdateDeliveryStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryServiceClient) ListDeliveryAssignments(ctx context.Context, in *ListDeliveryAssignmentsRequest, opts ...grpc.CallOption) (*ListDeliveryAssignmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDeliveryAssignmentsResponse)
	err := c.cc.Invoke(ctx, DeliveryService_ListDeliveryAssignments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryServiceClient) AssignDriver(ctx context.Context, in *AssignDriverRequest, opts ...grpc.CallOption) (*DeliveryAssignment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeliveryAssignment)
	err := c.cc.Invoke(ctx, DeliveryService_AssignDriver_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryServiceClient) GetDeliveryMetrics(ctx context.Context, in *GetDeliveryMetricsRequest, opts ...grpc.CallOption) (*DeliveryMetrics, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeliveryMetrics)
	err := c.cc.Invoke(ctx, DeliveryService_GetDeliveryMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeliveryServiceServer is the server API for DeliveryService service.
// All implementations must embed UnimplementedDeliveryServiceServer
// for forward compatibility.
//
// DeliveryService manages order delivery assignments
type DeliveryServiceServer interface {
	// CreateDeliveryAssignment creates a new delivery assignment
	CreateDeliveryAssignment(context.Context, *CreateDeliveryAssignmentRequest) (*DeliveryAssignment, error)
	// GetDeliveryAssignment retrieves a delivery assignment by ID
	GetDeliveryAssignment(context.Context, *GetDeliveryAssignmentRequest) (*DeliveryAssignment, error)
	// UpdateDeliveryStatus updates the status of a delivery
	UpdateDeliveryStatus(context.Context, *UpdateDeliveryStatusRequest) (*DeliveryAssignment, error)
	// ListDeliveryAssignments lists delivery assignments with pagination
	ListDeliveryAssignments(context.Context, *ListDeliveryAssignmentsRequest) (*ListDeliveryAssignmentsResponse, error)
	// AssignDriver assigns a driver to a delivery
	AssignDriver(context.Context, *AssignDriverRequest) (*DeliveryAssignment, error)
	// GetDeliveryMetrics retrieves delivery metrics
	GetDeliveryMetrics(context.Context, *GetDeliveryMetricsRequest) (*DeliveryMetrics, error)
	mustEmbedUnimplementedDeliveryServiceServer()
}

// UnimplementedDeliveryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDeliveryServiceServer struct{}

func (UnimplementedDeliveryServiceServer) CreateDeliveryAssignment(context.Context, *CreateDeliveryAssignmentRequest) (*DeliveryAssignment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeliveryAssignment not implemented")
}
func (UnimplementedDeliveryServiceServer) GetDeliveryAssignment(context.Context, *GetDeliveryAssignmentRequest) (*DeliveryAssignment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeliveryAssignment not implemented")
}
func (UnimplementedDeliveryServiceServer) UpdateDeliveryStatus(context.Context, *UpdateDeliveryStatusRequest) (*DeliveryAssignment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeliveryStatus not implemented")
}
func (UnimplementedDeliveryServiceServer) ListDeliveryAssignments(context.Context, *ListDeliveryAssignmentsRequest) (*ListDeliveryAssignmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeliveryAssignments not implemented")
}
func (UnimplementedDeliveryServiceServer) AssignDriver(context.Context, *AssignDriverRequest) (*DeliveryAssignment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignDriver not implemented")
}
func (UnimplementedDeliveryServiceServer) GetDeliveryMetrics(context.Context, *GetDeliveryMetricsRequest) (*DeliveryMetrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeliveryMetrics not implemented")
}
func (UnimplementedDeliveryServiceServer) mustEmbedUnimplementedDeliveryServiceServer() {}
func (UnimplementedDeliveryServiceServer) testEmbeddedByValue()                         {}

// UnsafeDeliveryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeliveryServiceServer will
// result in compilation errors.
type UnsafeDeliveryServiceServer interface {
	mustEmbedUnimplementedDeliveryServiceServer()
}

func RegisterDeliveryServiceServer(s grpc.ServiceRegistrar, srv DeliveryServiceServer) {
	// If the following call pancis, it indicates UnimplementedDeliveryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DeliveryService_ServiceDesc, srv)
}

func _DeliveryService_CreateDeliveryAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeliveryAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServiceServer).CreateDeliveryAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryService_CreateDeliveryAssignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServiceServer).CreateDeliveryAssignment(ctx, req.(*CreateDeliveryAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryService_GetDeliveryAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeliveryAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServiceServer).GetDeliveryAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryService_GetDeliveryAssignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServiceServer).GetDeliveryAssignment(ctx, req.(*GetDeliveryAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryService_UpdateDeliveryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeliveryStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServiceServer).UpdateDeliveryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryService_UpdateDeliveryStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServiceServer).UpdateDeliveryStatus(ctx, req.(*UpdateDeliveryStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryService_ListDeliveryAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeliveryAssignmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServiceServer).ListDeliveryAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryService_ListDeliveryAssignments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServiceServer).ListDeliveryAssignments(ctx, req.(*ListDeliveryAssignmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryService_AssignDriver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignDriverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServiceServer).AssignDriver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryService_AssignDriver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServiceServer).AssignDriver(ctx, req.(*AssignDriverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryService_GetDeliveryMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeliveryMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServiceServer).GetDeliveryMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryService_GetDeliveryMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServiceServer).GetDeliveryMetrics(ctx, req.(*GetDeliveryMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeliveryService_ServiceDesc is the grpc.ServiceDesc for DeliveryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeliveryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "delivery.DeliveryService",
	HandlerType: (*DeliveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDeliveryAssignment",
			Handler:    _DeliveryService_CreateDeliveryAssignment_Handler,
		},
		{
			MethodName: "GetDeliveryAssignment",
			Handler:    _DeliveryService_GetDeliveryAssignment_Handler,
		},
		{
			MethodName: "UpdateDeliveryStatus",
			Handler:    _DeliveryService_UpdateDeliveryStatus_Handler,
		},
		{
			MethodName: "ListDeliveryAssignments",
			Handler:    _DeliveryService_ListDeliveryAssignments_Handler,
		},
		{
			MethodName: "AssignDriver",
			Handler:    _DeliveryService_AssignDriver_Handler,
		},
		{
			MethodName: "GetDeliveryMetrics",
			Handler:    _DeliveryService_GetDeliveryMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/delivery.proto",
}
